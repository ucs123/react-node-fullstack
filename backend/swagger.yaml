openapi: 3.0.0
info:
  title: Todo & QnA API
  version: 1.0.0
  description: >
    API for authentication, todo management, Q&A features, and health check.

servers:
  - url: http://localhost:3000/api
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []   # Apply JWT auth globally (except for login/register)

paths:
  /auth/login:
    post:
      summary: User login
      tags: [Auth]
      security: []   # No token required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: secret123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        '401':
          description: Invalid credentials

  /auth/register:
    post:
      summary: User registration
      tags: [Auth]
      security: []   # No token required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  example: newuser@example.com
                password:
                  type: string
                  example: password123
      responses:
        '201':
          description: User created
        '400':
          description: Invalid input

  /todos:
    get:
      summary: Get all todos
      tags: [Todos]
      responses:
        '200':
          description: List of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
    post:
      summary: Create a new todo
      tags: [Todos]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        '201':
          description: Todo created

  /todos/{id}:
    get:
      summary: Get a todo by ID
      tags: [Todos]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Todo object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Todo not found
    put:
      summary: Update a todo
      tags: [Todos]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        '200':
          description: Todo updated
    delete:
      summary: Delete a todo
      tags: [Todos]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Todo deleted

  /questions:
    get:
      summary: Get all questions
      tags: [QnA]
      responses:
        '200':
          description: List of questions
    post:
      summary: Ask a new question
      tags: [QnA]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [question]
              properties:
                question:
                  type: string
                  example: "What is Node.js?"
      responses:
        '201':
          description: Question created

  /questions/{id}/replies:
    post:
      summary: Add a reply to a question
      tags: [QnA]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reply]
              properties:
                reply:
                  type: string
                  example: "Node.js is a JavaScript runtime."
      responses:
        '201':
          description: Reply added

  /health:
    get:
      summary: Health check
      tags: [System]
      security: []   # No token required
      responses:
        '200':
          description: Server health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    format: date-time

components:
  schemas:
    Todo:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          example: Buy groceries
        completed:
          type: boolean
          example: false
    TodoInput:
      type: object
      properties:
        title:
          type: string
        completed:
          type: boolean
